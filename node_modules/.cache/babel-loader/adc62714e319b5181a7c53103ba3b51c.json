{"ast":null,"code":"var _jsxFileName = \"/Users/hongseong-a/\\u1100\\u1162\\u110B\\u1175\\u11ABpractice/Udemy-react-practice/src/components/Expenses/Expenses.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./Expenses.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from './ExpensesFilter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Expenses = props => {\n  _s();\n\n  const [filteredYear, setFilterdYear] = useState('2020');\n\n  const filterChangeHandler = selectedYear => {\n    console.log(\"In Expenses.js\");\n    setFilterdYear(selectedYear);\n    console.log(selectedYear);\n  }; // 변수 filteredExpenses에 각 expense의 날짜의 full연도가 필터링된 연도와 같은 날짜를 가지고 있는 아이템만 필터링해서 할당해주는 코드\n\n\n  const filteredExpenses = props.items.filter(expense => {\n    return expense.date.getFullYear().toString() === filteredYear;\n  }); // 변경 가능한 변수로 할당해서 깔끔하게 작성하기\n\n  let expenseContent = /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No expenses found.\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 26\n  }, this);\n\n  if (filteredExpenses.length > 0) {\n    expenseContent = filteredExpenses.map(expense => /*#__PURE__*/_jsxDEV(ExpenseItem // Warning: Each child in a list should have a unique \"key\" prop.\n    // 위와 같은 오류메시지: 특정 컨텐츠를 갖는 모든 아이템들은 분명하게 고유한 id를 갖고 있어야 함 -> key속성 적어주기\n    // 더미데이터에서 고유한 id 사용\n    // 아이템이 위치해야할 곳 까지 인식함\n    , {\n      title: expense.title,\n      amount: expense.amount,\n      date: expense.date\n    }, expense.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"expenses\",\n      children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n        selected: filteredYear,\n        onFilterChange: filterChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), expenseContent]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Expenses, \"6t5RofGVT1SSwM0Kq77oCcDP6gc=\");\n\n_c = Expenses;\nexport default Expenses;\n\nvar _c;\n\n$RefreshReg$(_c, \"Expenses\");","map":{"version":3,"names":["React","useState","ExpenseItem","Card","ExpensesFilter","Expenses","props","filteredYear","setFilterdYear","filterChangeHandler","selectedYear","console","log","filteredExpenses","items","filter","expense","date","getFullYear","toString","expenseContent","length","map","title","amount","id"],"sources":["/Users/hongseong-a/개인practice/Udemy-react-practice/src/components/Expenses/Expenses.js"],"sourcesContent":["import React, { useState } from 'react';\nimport \"./Expenses.css\";\nimport ExpenseItem from \"./ExpenseItem\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from './ExpensesFilter';\n\nconst Expenses = (props) => {\n  const [filteredYear, setFilterdYear] = useState('2020');\n\n    const filterChangeHandler = (selectedYear) => {\n      console.log(\"In Expenses.js\")\n      setFilterdYear(selectedYear);\n      console.log(selectedYear);\n    }\n\n    // 변수 filteredExpenses에 각 expense의 날짜의 full연도가 필터링된 연도와 같은 날짜를 가지고 있는 아이템만 필터링해서 할당해주는 코드\n    const filteredExpenses = props.items.filter((expense) => {\n        return expense.date.getFullYear().toString() === filteredYear;\n    })\n\n    // 변경 가능한 변수로 할당해서 깔끔하게 작성하기\n    let expenseContent = <p>No expenses found.</p>;\n    \n    if(filteredExpenses.length > 0) {\n      expenseContent = filteredExpenses.map((expense) => (\n        <ExpenseItem \n        // Warning: Each child in a list should have a unique \"key\" prop.\n        // 위와 같은 오류메시지: 특정 컨텐츠를 갖는 모든 아이템들은 분명하게 고유한 id를 갖고 있어야 함 -> key속성 적어주기\n        // 더미데이터에서 고유한 id 사용\n        // 아이템이 위치해야할 곳 까지 인식함\n        key={expense.id}\n        title={expense.title}\n        amount={expense.amount}\n        date={expense.date} />\n        ))   \n    }\n    \n\n    return (\n      <div>\n        <Card className=\"expenses\">\n          {/* selected라는 속성값에 초기값이 저장되어있는 state를 값으로 주게 되면 양방향 바인딩 가능!  */}\n            <ExpensesFilter \n            selected={filteredYear} \n            onFilterChange={filterChangeHandler}/>\n            {expenseContent}\n        </Card>\n     </div>\n    )\n}\n\nexport default Expenses;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC1B,MAAM,CAACC,YAAD,EAAeC,cAAf,IAAiCP,QAAQ,CAAC,MAAD,CAA/C;;EAEE,MAAMQ,mBAAmB,GAAIC,YAAD,IAAkB;IAC5CC,OAAO,CAACC,GAAR,CAAY,gBAAZ;IACAJ,cAAc,CAACE,YAAD,CAAd;IACAC,OAAO,CAACC,GAAR,CAAYF,YAAZ;EACD,CAJD,CAHwB,CASxB;;;EACA,MAAMG,gBAAgB,GAAGP,KAAK,CAACQ,KAAN,CAAYC,MAAZ,CAAoBC,OAAD,IAAa;IACrD,OAAOA,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,QAA3B,OAA0CZ,YAAjD;EACH,CAFwB,CAAzB,CAVwB,CAcxB;;EACA,IAAIa,cAAc,gBAAG;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAArB;;EAEA,IAAGP,gBAAgB,CAACQ,MAAjB,GAA0B,CAA7B,EAAgC;IAC9BD,cAAc,GAAGP,gBAAgB,CAACS,GAAjB,CAAsBN,OAAD,iBACpC,QAAC,WAAD,CACA;IACA;IACA;IACA;IAJA;MAMA,KAAK,EAAEA,OAAO,CAACO,KANf;MAOA,MAAM,EAAEP,OAAO,CAACQ,MAPhB;MAQA,IAAI,EAAER,OAAO,CAACC;IARd,GAKKD,OAAO,CAACS,EALb;MAAA;MAAA;MAAA;IAAA,QADe,CAAjB;EAWD;;EAGD,oBACE;IAAA,uBACE,QAAC,IAAD;MAAM,SAAS,EAAC,UAAhB;MAAA,wBAEI,QAAC,cAAD;QACA,QAAQ,EAAElB,YADV;QAEA,cAAc,EAAEE;MAFhB;QAAA;QAAA;QAAA;MAAA,QAFJ,EAKKW,cALL;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAWH,CA3CD;;GAAMf,Q;;KAAAA,Q;AA6CN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}