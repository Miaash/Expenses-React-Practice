{"ast":null,"code":"var _jsxFileName = \"/Users/hongseong-a/\\u1100\\u1162\\u110B\\u1175\\u11ABpractice/Udemy-react-practice/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\"; // 여기는 새로운 expense의 데이터를 받는 컴포넌트입니다. NewExpense의 자식입니다.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  // })\n\n  const titleChangeHandler = event => {\n    // value는 이벤트가 발생했을 때의 현재입력값을 가짐\n    // 아래 함수는 상태를 업데이트 할 때 항상 업데이트 됨\n    setEnteredTitle(event.target.value); // 동시에 많은 state 업데이트를 할 때에 오래되거나 잘못된 스냅샷에 의존할 수 있음\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value,\n    // })\n    // state 업데이트가 이전 상태에 의존하고 있다면 아래와 같은 방법 추천\n    // setUserInput((prvState) => {\n    //     return {...prvState, enteredTitle: event.target.value};\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value,\n    // })\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = event => {\n    // 이벤트가 실행될때 다시 로드되지 않도록하는 내장 메서드 preventDafault\n    event.preventDefault(); //기본 객체 폼을 만들어준다\n    // 'title:'과 같은 속성은 마음대로 지어도 되지만 해당 값들은 state의 변수를 사용해얄한다.\n    // 여기에 새로 입력된 expense 데이터가 저장된다. 이걸 App.js로 전달해줘야함 (상향식, state끌어올리기?)\n    /// 입력된 상태들을 결합\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    }; // 여기부터 양방향 바인딩\n    // 밑에 form 안에 각 요소에 value 값에 state를 줘야함\n    // onSaveExpenseData 함수는 ExpenseForm 안에서 정의되지 않았어도 props를 통해 NewExpense에서 정의된 함수를\n    // 사용할 수 있다 => 부모 컴포넌트와 자식 컴포넌트가 소통하는 방법\n    // 매개변수에 expenseData를 전달해주면 NewExpense의 함수의 매개변수로 전달이 된다.\n\n    props.onSaveExpense(expenseData); // 초기 상태로 만들기\n\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: enteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: enteredAmount,\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: enteredDate,\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpense"],"sources":["/Users/hongseong-a/개인practice/Udemy-react-practice/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./ExpenseForm.css\";\n// 여기는 새로운 expense의 데이터를 받는 컴포넌트입니다. NewExpense의 자식입니다.\n\n\nconst ExpenseForm = (props) => {\n    const [enteredTitle, setEnteredTitle] = useState('');\n    const [enteredAmount, setEnteredAmount] = useState('');\n    const [enteredDate, setEnteredDate] = useState('');\n    // const [userInput, setUserInput] = useState({\n    //     enteredTitle: '',\n    //     enteredAmount: '',\n    //     enteredDate: '',\n    // })\n\n\n\n    const titleChangeHandler = (event) => {\n        // value는 이벤트가 발생했을 때의 현재입력값을 가짐\n        // 아래 함수는 상태를 업데이트 할 때 항상 업데이트 됨\n        setEnteredTitle(event.target.value);\n        \n        // 동시에 많은 state 업데이트를 할 때에 오래되거나 잘못된 스냅샷에 의존할 수 있음\n        // setUserInput({\n        //     ...userInput,\n        //     enteredTitle: event.target.value,\n        // })\n\n        // state 업데이트가 이전 상태에 의존하고 있다면 아래와 같은 방법 추천\n        // setUserInput((prvState) => {\n        //     return {...prvState, enteredTitle: event.target.value};\n        // });\n    }\n\n    const amountChangeHandler = (event) => {\n        setEnteredAmount(event.target.value)\n        \n        // setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value,\n        // })\n    }\n\n    const dateChangeHandler = (event) => {\n        setEnteredDate(event.target.value)\n       \n        \n    }\n\n    const submitHandler = (event) => {\n        // 이벤트가 실행될때 다시 로드되지 않도록하는 내장 메서드 preventDafault\n        event.preventDefault();\n        //기본 객체 폼을 만들어준다\n        // 'title:'과 같은 속성은 마음대로 지어도 되지만 해당 값들은 state의 변수를 사용해얄한다.\n        // 여기에 새로 입력된 expense 데이터가 저장된다. 이걸 App.js로 전달해줘야함 (상향식, state끌어올리기?)\n        /// 입력된 상태들을 결합\n        const expenseData = {\n            title: enteredTitle,\n            amount: enteredAmount,\n            date: new Date(enteredDate)\n        };\n\n        // 여기부터 양방향 바인딩\n        // 밑에 form 안에 각 요소에 value 값에 state를 줘야함\n        // onSaveExpenseData 함수는 ExpenseForm 안에서 정의되지 않았어도 props를 통해 NewExpense에서 정의된 함수를\n        // 사용할 수 있다 => 부모 컴포넌트와 자식 컴포넌트가 소통하는 방법\n\n        // 매개변수에 expenseData를 전달해주면 NewExpense의 함수의 매개변수로 전달이 된다.\n        props.onSaveExpense(expenseData);\n        // 초기 상태로 만들기\n        setEnteredTitle('');\n        setEnteredAmount('');\n        setEnteredDate('');\n        \n    }\n\n\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div className=\"new-expense__controls\">\n                <div className=\"new-expense__control\">\n                    <label>Title</label>\n                    {/* value값을 state로 주게 되면 양방향 바인딩 가능 새로 고침 시에 초기 상태로 돌아감  */}\n                    <input type=\"text\" value={enteredTitle} onChange={titleChangeHandler}/>\n                </div>\n                <div className=\"new-expense__control\">\n                    <label>Amount</label>\n                    <input type=\"number\" value={enteredAmount} min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler} />\n                </div>\n                <div className=\"new-expense__control\">\n                    <label>Date</label>\n                    <input type=\"date\" value={enteredDate} min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\n                </div>\n            </div>\n            <div className=\"new-expense__actions\">\n                <button type=\"submit\">Add Expense</button>\n            </div>\n        </form>\n    )\n};\n\nexport default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module"}