{"ast":null,"code":"var _jsxFileName = \"/Users/hongseong-a/\\u1100\\u1162\\u110B\\u1175\\u11ABpractice/Udemy-react-practice/src/components/NewExpense/NewExpense.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Expenses from \"./components/Expense/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_DATA = [{\n  id: 'e1',\n  title: 'Toilet Paper',\n  amount: 94.12,\n  date: new Date(2020, 7, 14)\n}, {\n  id: 'e2',\n  title: 'New TV',\n  amount: 799.49,\n  date: new Date(2021, 2, 12)\n}, {\n  id: 'e3',\n  title: 'Car Insurance',\n  amount: 294.67,\n  date: new Date(2021, 2, 28)\n}, {\n  id: 'e4',\n  title: 'New Desk (Wooden)',\n  amount: 450,\n  date: new Date(2021, 5, 12)\n}];\n\nconst App = () => {\n  _s();\n\n  // useState에서 초깃값은 DUMMY_EXPENSES\n  // 사용자입력폼의 내용들은 내부에서 변할 수 있는 값이므로 state에 저장\n  const [expenses, setExpenses] = useState(DUMMY_DATA);\n\n  const addExpenseHandler = expense => {\n    // 기존에 있던 더미데이터의 값들을 배열에 직접 넣어주기보다\n    // 기존에 있던 값들을 setExpenses의 인자로 전달해 배열에 넣어주면 뭔 차이일까 뭐지 뭔개소리지\n    // setExpenses([expense, ...expenses])\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    }); // console.log(\"In App.js\");\n    // console.log(expense);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(NewExpense, {\n      onAddExpense: addExpenseHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Expenses, {\n      items: expenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Ju8+NqtGljFqQV71oTAq5IhKCVE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Expenses","NewExpense","DUMMY_DATA","id","title","amount","date","Date","App","expenses","setExpenses","addExpenseHandler","expense","prevExpenses"],"sources":["/Users/hongseong-a/개인practice/Udemy-react-practice/src/components/NewExpense/NewExpense.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Expenses from \"./components/Expense/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\nconst DUMMY_DATA = [\n  {\n    id: 'e1',\n    title: 'Toilet Paper',\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  { id: 'e2',\n    title: 'New TV',\n    amount: 799.49,\n    date: new Date(2021, 2, 12) \n  },\n  {\n    id: 'e3',\n    title: 'Car Insurance',\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: 'e4',\n    title: 'New Desk (Wooden)',\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\nconst App = () => {\n  // useState에서 초깃값은 DUMMY_EXPENSES\n  // 사용자입력폼의 내용들은 내부에서 변할 수 있는 값이므로 state에 저장\n  const [expenses, setExpenses] = useState(DUMMY_DATA);\n  \n  const addExpenseHandler = (expense) => {\n    \n    // 기존에 있던 더미데이터의 값들을 배열에 직접 넣어주기보다\n    // 기존에 있던 값들을 setExpenses의 인자로 전달해 배열에 넣어주면 뭔 차이일까 뭐지 뭔개소리지\n    // setExpenses([expense, ...expenses])\n    setExpenses((prevExpenses) => {\n      return [expense, ...prevExpenses];\n    })\n      // console.log(\"In App.js\");\n      // console.log(expense);\n\n    \n  }\n\n  return (\n    <div>\n      {/* 속성(property)이름은 맘대로 지어도 된다 */}\n      <NewExpense onAddExpense={addExpenseHandler}/>\n      <Expenses items={expenses} />\n    </div>\n  )\n}\n\nexport default App;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,+BAArB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;AACA,MAAMC,UAAU,GAAG,CACjB;EACEC,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,cAFT;EAGEC,MAAM,EAAE,KAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CADiB,EAOjB;EAAEJ,EAAE,EAAE,IAAN;EACEC,KAAK,EAAE,QADT;EAEEC,MAAM,EAAE,MAFV;EAGEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAHR,CAPiB,EAYjB;EACEJ,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,eAFT;EAGEC,MAAM,EAAE,MAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAZiB,EAkBjB;EACEJ,EAAE,EAAE,IADN;EAEEC,KAAK,EAAE,mBAFT;EAGEC,MAAM,EAAE,GAHV;EAIEC,IAAI,EAAE,IAAIC,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,EAAlB;AAJR,CAlBiB,CAAnB;;AAyBA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB;EACA;EACA,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAACG,UAAD,CAAxC;;EAEA,MAAMS,iBAAiB,GAAIC,OAAD,IAAa;IAErC;IACA;IACA;IACAF,WAAW,CAAEG,YAAD,IAAkB;MAC5B,OAAO,CAACD,OAAD,EAAU,GAAGC,YAAb,CAAP;IACD,CAFU,CAAX,CALqC,CAQnC;IACA;EAGH,CAZD;;EAcA,oBACE;IAAA,wBAEE,QAAC,UAAD;MAAY,YAAY,EAAEF;IAA1B;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE,QAAC,QAAD;MAAU,KAAK,EAAEF;IAAjB;MAAA;MAAA;MAAA;IAAA,QAHF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAOD,CA1BD;;GAAMD,G;;KAAAA,G;AA4BN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}