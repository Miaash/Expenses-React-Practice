{"ast":null,"code":"var _jsxFileName = \"/Users/hongseong-a/Downloads/Udemy-react-practice/src/components/NewExpense/ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseForm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = () => {\n  _s();\n\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState(''); // const [userInput, setUserInput] = useState({\n  //     enteredTitle: '',\n  //     enteredAmount: '',\n  //     enteredDate: '',\n  // })\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n    console.log(event.target.value); // 동시에 많은 state 업데이트를 할 때에 오래되거나 잘못된 스냅샷에 의존할 수 있음\n    // setUserInput({\n    //     ...userInput,\n    //     enteredTitle: event.target.value,\n    // })\n    // state 업데이트가 이전 상태에 의존하고 있다면 아래와 같은 방법 추천\n    // setUserInput((prvState) => {\n    //     return {...prvState, enteredTitle: event.target.value};\n    // });\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n    console.log(event.target.value); // setUserInput({\n    //     ...userInput,\n    //     enteredAmount: event.target.value,\n    // })\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n    console.log(event.target.value);\n  };\n\n  const submitHandler = event => {\n    // 이벤트가 실행될때 다시 로드되지 않도록하는 내장 메서드 preventDafault\n    event.preventDefault(); //기본 객체 폼을 만들어준다\n\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      data: new Date(enteredDate)\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add Expense\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ExpenseForm, \"/TSOglz5ZV3C6oWQkp/FZ+OWqo4=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","titleChangeHandler","event","target","value","console","log","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","expenseData","title","amount","data","Date"],"sources":["/Users/hongseong-a/Downloads/Udemy-react-practice/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport \"./ExpenseForm.css\";\n\n\nconst ExpenseForm = () => {\n    const [enteredTitle, setEnteredTitle] = useState('');\n    const [enteredAmount, setEnteredAmount] = useState('');\n    const [enteredDate, setEnteredDate] = useState('');\n    // const [userInput, setUserInput] = useState({\n    //     enteredTitle: '',\n    //     enteredAmount: '',\n    //     enteredDate: '',\n    // })\n\n\n\n    const titleChangeHandler = (event) => {\n        setEnteredTitle(event.target.value);\n        console.log(event.target.value);\n        // 동시에 많은 state 업데이트를 할 때에 오래되거나 잘못된 스냅샷에 의존할 수 있음\n        // setUserInput({\n        //     ...userInput,\n        //     enteredTitle: event.target.value,\n        // })\n\n        // state 업데이트가 이전 상태에 의존하고 있다면 아래와 같은 방법 추천\n        // setUserInput((prvState) => {\n        //     return {...prvState, enteredTitle: event.target.value};\n        // });\n    }\n\n    const amountChangeHandler = (event) => {\n        setEnteredAmount(event.target.value)\n        console.log(event.target.value);\n        // setUserInput({\n        //     ...userInput,\n        //     enteredAmount: event.target.value,\n        // })\n    }\n\n    const dateChangeHandler = (event) => {\n        setEnteredDate(event.target.value)\n        console.log(event.target.value);\n        \n    }\n\n    const submitHandler = (event) => {\n        // 이벤트가 실행될때 다시 로드되지 않도록하는 내장 메서드 preventDafault\n        event.preventDefault();\n        //기본 객체 폼을 만들어준다\n        const expenseData = {\n            title: enteredTitle,\n            amount: enteredAmount,\n            data: new Date(enteredDate)\n        };\n\n    }\n\n\n\n    return (\n        <form onSubmit={submitHandler}>\n            <div className=\"new-expense__controls\">\n                <div className=\"new-expense__control\">\n                    <label>Title</label>\n                    <input type=\"text\" onChange={titleChangeHandler}/>\n                </div>\n                <div className=\"new-expense__control\">\n                    <label>Amount</label>\n                    <input type=\"number\" min=\"0.01\" step=\"0.01\" onChange={amountChangeHandler} />\n                </div>\n                <div className=\"new-expense__control\">\n                    <label>Date</label>\n                    <input type=\"date\" min=\"2019-01-01\" max=\"2022-12-31\" onChange={dateChangeHandler}/>\n                </div>\n            </div>\n            <div className=\"new-expense__actions\">\n                <button type=\"submit\">Add Expense</button>\n            </div>\n        </form>\n    )\n};\n\nexport default ExpenseForm;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,mBAAP;;;AAGA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACtB,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCH,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAACI,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,EAAD,CAAlD;EACA,MAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C,CAHsB,CAItB;EACA;EACA;EACA;EACA;;EAIA,MAAMQ,kBAAkB,GAAIC,KAAD,IAAW;IAClCN,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;IACAC,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAzB,EAFkC,CAGlC;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;EACH,CAbD;;EAeA,MAAMG,mBAAmB,GAAIL,KAAD,IAAW;IACnCJ,gBAAgB,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;IACAC,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAzB,EAFmC,CAGnC;IACA;IACA;IACA;EACH,CAPD;;EASA,MAAMI,iBAAiB,GAAIN,KAAD,IAAW;IACjCF,cAAc,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;IACAC,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACC,MAAN,CAAaC,KAAzB;EAEH,CAJD;;EAMA,MAAMK,aAAa,GAAIP,KAAD,IAAW;IAC7B;IACAA,KAAK,CAACQ,cAAN,GAF6B,CAG7B;;IACA,MAAMC,WAAW,GAAG;MAChBC,KAAK,EAAEjB,YADS;MAEhBkB,MAAM,EAAEhB,aAFQ;MAGhBiB,IAAI,EAAE,IAAIC,IAAJ,CAAShB,WAAT;IAHU,CAApB;EAMH,CAVD;;EAcA,oBACI;IAAM,QAAQ,EAAEU,aAAhB;IAAA,wBACI;MAAK,SAAS,EAAC,uBAAf;MAAA,wBACI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,QAAQ,EAAER;QAA7B;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,eAKI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,QAAZ;UAAqB,GAAG,EAAC,MAAzB;UAAgC,IAAI,EAAC,MAArC;UAA4C,QAAQ,EAAEM;QAAtD;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QALJ,eASI;QAAK,SAAS,EAAC,sBAAf;QAAA,wBACI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADJ,eAEI;UAAO,IAAI,EAAC,MAAZ;UAAmB,GAAG,EAAC,YAAvB;UAAoC,GAAG,EAAC,YAAxC;UAAqD,QAAQ,EAAEC;QAA/D;UAAA;UAAA;UAAA;QAAA,QAFJ;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAeI;MAAK,SAAS,EAAC,sBAAf;MAAA,uBACI;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAfJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAqBH,CA7ED;;GAAMd,W;;KAAAA,W;AA+EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}